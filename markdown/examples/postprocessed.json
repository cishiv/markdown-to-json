{
  "0": {
    "content": "# Markdown: Syntax",
    "results": [
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "1": {
    "content": "idx:1",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "10": {
    "content": "    *   [Lists](#list)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 22
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "100": {
    "content": "\u003e \u003e This is nested blockquote.",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "101": {
    "content": "\u003e",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "102": {
    "content": "\u003e Back to the first level.",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "103": {
    "content": "idx:103",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "104": {
    "content": "Blockquotes can contain other Markdown elements, including headers, lists,",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "105": {
    "content": "and code blocks:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "106": {
    "content": "idx:106",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "107": {
    "content": "\u003e ## This is a header.",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "108": {
    "content": "\u003e ",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "109": {
    "content": "\u003e 1.   This is the first list item.",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "11": {
    "content": "    *   [Code Blocks](#precode)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 31
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "110": {
    "content": "\u003e 2.   This is the second list item.",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "111": {
    "content": "\u003e ",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "112": {
    "content": "\u003e Here's some example code:",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "113": {
    "content": "\u003e ",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "114": {
    "content": "\u003e     return shell_exec(\"echo $input | $markdown_script\");",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "em",
        "occurences": [
          {
            "firstIdx": 18,
            "secondIdx": 49
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "115": {
    "content": "idx:115",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "116": {
    "content": "Any decent text editor should make email-style quoting easy. For",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "117": {
    "content": "example, with BBEdit, you can make a selection and choose Increase",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "118": {
    "content": "Quote Level from the Text menu.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "119": {
    "content": "idx:119",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "12": {
    "content": "    *   [Horizontal Rules](#hr)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 31
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "120": {
    "content": "idx:120",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "121": {
    "content": "### Lists",
    "results": [
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      },
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading3",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "122": {
    "content": "idx:122",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "123": {
    "content": "Markdown supports ordered (numbered) and unordered (bulleted) lists.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "124": {
    "content": "idx:124",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "125": {
    "content": "Unordered lists use asterisks, pluses, and hyphens -- interchangably",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "126": {
    "content": "-- as list markers:",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "127": {
    "content": "idx:127",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "128": {
    "content": "*   Red",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "129": {
    "content": "*   Green",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "13": {
    "content": "*   [Span Elements](#span)",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 4,
            "secondIdx": 26
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "130": {
    "content": "*   Blue",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "131": {
    "content": "idx:131",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "132": {
    "content": "is equivalent to:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "133": {
    "content": "idx:133",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "134": {
    "content": "+   Red",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "135": {
    "content": "+   Green",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "136": {
    "content": "+   Blue",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "137": {
    "content": "idx:137",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "138": {
    "content": "and:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "139": {
    "content": "idx:139",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "14": {
    "content": "    *   [Links](#link)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 22
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "140": {
    "content": "-   Red",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "141": {
    "content": "-   Green",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "142": {
    "content": "-   Blue",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "143": {
    "content": "idx:143",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "144": {
    "content": "Ordered lists use numbers followed by periods:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "145": {
    "content": "idx:145",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "146": {
    "content": "1.  Bird",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "147": {
    "content": "2.  McHale",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "148": {
    "content": "3.  Parish",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "149": {
    "content": "idx:149",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "15": {
    "content": "    *   [Emphasis](#em)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 23
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "150": {
    "content": "It's important to note that the actual numbers you use to mark the",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "151": {
    "content": "list have no effect on the HTML output Markdown produces. The HTML",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "152": {
    "content": "Markdown produces from the above list is:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "153": {
    "content": "idx:153",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "154": {
    "content": "If you instead wrote the list in Markdown like this:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "155": {
    "content": "idx:155",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "156": {
    "content": "1.  Bird",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "157": {
    "content": "1.  McHale",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "158": {
    "content": "1.  Parish",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "159": {
    "content": "idx:159",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "16": {
    "content": "    *   [Code](#code)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 21
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "160": {
    "content": "or even:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "161": {
    "content": "idx:161",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "162": {
    "content": "3. Bird",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "163": {
    "content": "1. McHale",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "164": {
    "content": "8. Parish",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "165": {
    "content": "idx:165",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "166": {
    "content": "you'd get the exact same HTML output. The point is, if you want to,",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "167": {
    "content": "you can use ordinal numbers in your ordered Markdown lists, so that",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "168": {
    "content": "the numbers in your source match the numbers in your published HTML.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "169": {
    "content": "But if you want to be lazy, you don't have to.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "17": {
    "content": "    *   [Images](#img)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 22
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "170": {
    "content": "idx:170",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "171": {
    "content": "To make lists look nice, you can wrap items with hanging indents:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "172": {
    "content": "idx:172",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "173": {
    "content": "*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "174": {
    "content": "    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "175": {
    "content": "    viverra nec, fringilla in, laoreet vitae, risus.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "176": {
    "content": "*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "177": {
    "content": "    Suspendisse id sem consectetuer libero luctus adipiscing.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "178": {
    "content": "idx:178",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "179": {
    "content": "But if you want to be lazy, you don't have to:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "18": {
    "content": "*   [Miscellaneous](#misc)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 4,
            "secondIdx": 26
          }
        ]
      },
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "180": {
    "content": "idx:180",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "181": {
    "content": "*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "182": {
    "content": "Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "183": {
    "content": "viverra nec, fringilla in, laoreet vitae, risus.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "184": {
    "content": "*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "185": {
    "content": "Suspendisse id sem consectetuer libero luctus adipiscing.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "186": {
    "content": "idx:186",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "187": {
    "content": "List items may consist of multiple paragraphs. Each subsequent",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "188": {
    "content": "paragraph in a list item must be indented by either 4 spaces",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "189": {
    "content": "or one tab:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "19": {
    "content": "    *   [Backslash Escapes](#backslash)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 39
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "190": {
    "content": "idx:190",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "191": {
    "content": "1.  This is a list item with two paragraphs. Lorem ipsum dolor",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "192": {
    "content": "    sit amet, consectetuer adipiscing elit. Aliquam hendrerit",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "193": {
    "content": "    mi posuere lectus.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "194": {
    "content": "idx:194",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "195": {
    "content": "    Vestibulum enim wisi, viverra nec, fringilla in, laoreet",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "196": {
    "content": "    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "197": {
    "content": "    sit amet velit.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "198": {
    "content": "idx:198",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "199": {
    "content": "2.  Suspendisse id sem consectetuer libero luctus adipiscing.",
    "results": [
      {
        "matcher": "ol",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "2": {
    "content": "*   [Overview](#overview)",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 4,
            "secondIdx": 25
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "20": {
    "content": "    *   [Automatic Links](#autolink)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 36
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "200": {
    "content": "idx:200",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "201": {
    "content": "It looks nice if you indent every line of the subsequent",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "202": {
    "content": "paragraphs, but here again, Markdown will allow you to be",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "203": {
    "content": "lazy:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "204": {
    "content": "idx:204",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "205": {
    "content": "*   This is a list item with two paragraphs.",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "206": {
    "content": "idx:206",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "207": {
    "content": "    This is the second paragraph in the list item. You're",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "208": {
    "content": "only required to indent the first line. Lorem ipsum dolor",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "209": {
    "content": "sit amet, consectetuer adipiscing elit.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "21": {
    "content": "idx:21",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "210": {
    "content": "idx:210",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "211": {
    "content": "*   Another item in the same list.",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "212": {
    "content": "idx:212",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "213": {
    "content": "To put a blockquote within a list item, the blockquote's `\u003e`",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 57,
            "secondIdx": 60
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "214": {
    "content": "delimiters need to be indented:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "215": {
    "content": "idx:215",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "216": {
    "content": "*   A list item with a blockquote:",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "217": {
    "content": "idx:217",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "218": {
    "content": "    \u003e This is a blockquote",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "219": {
    "content": "    \u003e inside a list item.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "22": {
    "content": "idx:22",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "220": {
    "content": "idx:220",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "221": {
    "content": "To put a code block within a list item, the code block needs",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "222": {
    "content": "to be indented *twice* -- 8 spaces or two tabs:",
    "results": [
      {
        "matcher": "strong",
        "occurences": [
          {
            "firstIdx": 15,
            "secondIdx": 22
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "223": {
    "content": "idx:223",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "224": {
    "content": "*   A list item with a code block:",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "225": {
    "content": "idx:225",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "226": {
    "content": "        \u003ccode goes here\u003e",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "227": {
    "content": "idx:227",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "228": {
    "content": "### Code Blocks",
    "results": [
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      },
      {
        "matcher": "heading3",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "229": {
    "content": "idx:229",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "23": {
    "content": "**Note:** This document is itself written using Markdown; you",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "strong",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 9
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "230": {
    "content": "Pre-formatted code blocks are used for writing about programming or",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "231": {
    "content": "markup source code. Rather than forming normal paragraphs, the lines",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "232": {
    "content": "of a code block are interpreted literally. Markdown wraps a code block",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "233": {
    "content": "in both `\u003cpre\u003e` and `\u003ccode\u003e` tags.",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 28
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "234": {
    "content": "idx:234",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "235": {
    "content": "To produce a code block in Markdown, simply indent every line of the",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "236": {
    "content": "block by at least 4 spaces or 1 tab.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "237": {
    "content": "idx:237",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "238": {
    "content": "This is a normal paragraph:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "239": {
    "content": "idx:239",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "24": {
    "content": "can [see the source for it by adding '.text' to the URL](/projects/markdown/syntax.text).",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 4,
            "secondIdx": 88
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "240": {
    "content": "    This is a code block.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "241": {
    "content": "idx:241",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "242": {
    "content": "Here is an example of AppleScript:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "243": {
    "content": "idx:243",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "244": {
    "content": "    tell application \"Foo\"",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "245": {
    "content": "        beep",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "246": {
    "content": "    end tell",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "247": {
    "content": "idx:247",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "248": {
    "content": "A code block continues until it reaches a line that is not indented",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "249": {
    "content": "(or the end of the article).",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "25": {
    "content": "idx:25",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "250": {
    "content": "idx:250",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "251": {
    "content": "Within a code block, ampersands (`\u0026`) and angle brackets (`\u003c` and `\u003e`)",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 33,
            "secondIdx": 69
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "252": {
    "content": "are automatically converted into HTML entities. This makes it very",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "253": {
    "content": "easy to include example HTML source code using Markdown -- just paste",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "254": {
    "content": "it and indent it, and Markdown will handle the hassle of encoding the",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "255": {
    "content": "ampersands and angle brackets. For example, this:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "256": {
    "content": "idx:256",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "257": {
    "content": "    \u003cdiv class=\"footer\"\u003e",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "258": {
    "content": "        \u0026copy; 2004 Foo Corporation",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "259": {
    "content": "    \u003c/div\u003e",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "26": {
    "content": "----",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "hr",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "260": {
    "content": "idx:260",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "261": {
    "content": "Regular Markdown syntax is not processed within code blocks. E.g.,",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "262": {
    "content": "asterisks are just literal asterisks within a code block. This means",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "263": {
    "content": "it's also easy to use Markdown to write about Markdown's own syntax.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "264": {
    "content": "idx:264",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "265": {
    "content": "```",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      },
      {
        "matcher": "codeblock",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "266": {
    "content": "tell application \"Foo\"",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "267": {
    "content": "    beep",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "268": {
    "content": "end tell",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "269": {
    "content": "```",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      },
      {
        "matcher": "codeblock",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "27": {
    "content": "idx:27",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "270": {
    "content": "idx:270",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "271": {
    "content": "## Span Elements",
    "results": [
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "272": {
    "content": "idx:272",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "273": {
    "content": "### Links",
    "results": [
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      },
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading3",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "274": {
    "content": "idx:274",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "275": {
    "content": "Markdown supports two style of links: *inline* and *reference*.",
    "results": [
      {
        "matcher": "strong",
        "occurences": [
          {
            "firstIdx": 38,
            "secondIdx": 62
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "276": {
    "content": "idx:276",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "277": {
    "content": "In both styles, the link text is delimited by [square brackets].",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "278": {
    "content": "idx:278",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "279": {
    "content": "To create an inline link, use a set of regular parentheses immediately",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "28": {
    "content": "## Overview",
    "results": [
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "280": {
    "content": "after the link text's closing square bracket. Inside the parentheses,",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "281": {
    "content": "put the URL where you want the link to point, along with an *optional*",
    "results": [
      {
        "matcher": "strong",
        "occurences": [
          {
            "firstIdx": 60,
            "secondIdx": 70
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "282": {
    "content": "title for the link, surrounded in quotes. For example:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "283": {
    "content": "idx:283",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "284": {
    "content": "This is [an example](http://example.com/) inline link.",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 41
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "285": {
    "content": "idx:285",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "286": {
    "content": "[This link](http://example.net/) has no title attribute.",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 32
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "287": {
    "content": "idx:287",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "288": {
    "content": "### Emphasis",
    "results": [
      {
        "matcher": "heading3",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      },
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "289": {
    "content": "idx:289",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "29": {
    "content": "idx:29",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "290": {
    "content": "Markdown treats asterisks (`*`) and underscores (`_`) as indicators of",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 27,
            "secondIdx": 52
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "291": {
    "content": "emphasis. Text wrapped with one `*` or `_` will be wrapped with an",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 32,
            "secondIdx": 42
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "292": {
    "content": "HTML `\u003cem\u003e` tag; double `*`'s or `_`'s will be wrapped with an HTML",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 5,
            "secondIdx": 36
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "293": {
    "content": "`\u003cstrong\u003e` tag. E.g., this input:",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 10
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "294": {
    "content": "idx:294",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "295": {
    "content": "*single asterisks*",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "strong",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 18
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "296": {
    "content": "idx:296",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "297": {
    "content": "_single underscores_",
    "results": [
      {
        "matcher": "em",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 20
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "298": {
    "content": "idx:298",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "299": {
    "content": "**double asterisks**",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "strong",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 20
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "3": {
    "content": "    *   [Philosophy](#philosophy)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 33
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "30": {
    "content": "### Philosophy",
    "results": [
      {
        "matcher": "heading3",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      },
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "300": {
    "content": "idx:300",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "301": {
    "content": "__double underscores__",
    "results": [
      {
        "matcher": "em",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 22
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "302": {
    "content": "idx:302",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "303": {
    "content": "### Code",
    "results": [
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      },
      {
        "matcher": "heading3",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "304": {
    "content": "idx:304",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "305": {
    "content": "To indicate a span of code, wrap it with backtick quotes (`` ` ``).",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 58,
            "secondIdx": 65
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "306": {
    "content": "Unlike a pre-formatted code block, a code span indicates code within a",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "307": {
    "content": "normal paragraph. For example:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "308": {
    "content": "idx:308",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "309": {
    "content": "Use the `printf()` function.",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 18
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "31": {
    "content": "idx:31",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "32": {
    "content": "Markdown is intended to be as easy-to-read and easy-to-write as is feasible.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "33": {
    "content": "idx:33",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "34": {
    "content": "Readability, however, is emphasized above all else. A Markdown-formatted",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "35": {
    "content": "document should be publishable as-is, as plain text, without looking",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "36": {
    "content": "like it's been marked up with tags or formatting instructions. While",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "37": {
    "content": "Markdown's syntax has been influenced by several existing text-to-HTML",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "38": {
    "content": "filters -- including [Setext](http://docutils.sourceforge.net/mirror/setext.html), [atx](http://www.aaronsw.com/2002/atx/), [Textile](http://textism.com/tools/textile/), [reStructuredText](http://docutils.sourceforge.net/rst.html),",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 21,
            "secondIdx": 230
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "39": {
    "content": "[Grutatext](http://www.triptico.com/software/grutatxt.html), and [EtText](http://ettext.taint.org/doc/) -- the single biggest source of",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 103
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "4": {
    "content": "    *   [Inline HTML](#html)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 28
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "40": {
    "content": "inspiration for Markdown's syntax is the format of plain text email.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "41": {
    "content": "idx:41",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "42": {
    "content": "## Block Elements",
    "results": [
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "43": {
    "content": "idx:43",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "44": {
    "content": "### Paragraphs and Line Breaks",
    "results": [
      {
        "matcher": "heading3",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      },
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "45": {
    "content": "idx:45",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "46": {
    "content": "A paragraph is simply one or more consecutive lines of text, separated",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "47": {
    "content": "by one or more blank lines. (A blank line is any line that looks like a",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "48": {
    "content": "blank line -- a line containing nothing but spaces or tabs is considered",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "49": {
    "content": "blank.) Normal paragraphs should not be indented with spaces or tabs.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "5": {
    "content": "    *   [Automatic Escaping for Special Characters](#autoescape)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 64
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "50": {
    "content": "idx:50",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "51": {
    "content": "The implication of the \"one or more consecutive lines of text\" rule is",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "52": {
    "content": "that Markdown supports \"hard-wrapped\" text paragraphs. This differs",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "53": {
    "content": "significantly from most other text-to-HTML formatters (including Movable",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "54": {
    "content": "Type's \"Convert Line Breaks\" option) which translate every line break",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "55": {
    "content": "character in a paragraph into a `\u003cbr /\u003e` tag.",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 32,
            "secondIdx": 40
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "56": {
    "content": "idx:56",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "57": {
    "content": "When you *do* want to insert a `\u003cbr /\u003e` break tag using Markdown, you",
    "results": [
      {
        "matcher": "strong",
        "occurences": [
          {
            "firstIdx": 9,
            "secondIdx": 13
          }
        ]
      },
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 31,
            "secondIdx": 39
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "58": {
    "content": "end a line with two or more spaces, then type return.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "59": {
    "content": "idx:59",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "6": {
    "content": "*   [Block Elements](#block)",
    "results": [
      {
        "matcher": "ul",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 4,
            "secondIdx": 28
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "60": {
    "content": "### Headers",
    "results": [
      {
        "matcher": "heading3",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      },
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "61": {
    "content": "idx:61",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "62": {
    "content": "Markdown supports two styles of headers, [Setext] [1] and [atx] [2].",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "63": {
    "content": "idx:63",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "64": {
    "content": "Optionally, you may \"close\" atx-style headers. This is purely",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "65": {
    "content": "cosmetic -- you can use this if you think it looks better. The",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "66": {
    "content": "closing hashes don't even need to match the number of hashes",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "67": {
    "content": "used to open the header. (The number of opening hashes",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "68": {
    "content": "determines the header level.)",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "69": {
    "content": "idx:69",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "7": {
    "content": "    *   [Paragraphs and Line Breaks](#p)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 40
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "70": {
    "content": "idx:70",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "71": {
    "content": "### Blockquotes",
    "results": [
      {
        "matcher": "heading1",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      },
      {
        "matcher": "heading2",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 2
          }
        ]
      },
      {
        "matcher": "heading3",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 3
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "72": {
    "content": "idx:72",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "73": {
    "content": "Markdown uses email-style `\u003e` characters for blockquoting. If you're",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 26,
            "secondIdx": 29
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "74": {
    "content": "familiar with quoting passages of text in an email message, then you",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "75": {
    "content": "know how to create a blockquote in Markdown. It looks best if you hard",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "76": {
    "content": "wrap the text and put a `\u003e` before every line:",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 24,
            "secondIdx": 27
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "77": {
    "content": "idx:77",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "78": {
    "content": "\u003e This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "79": {
    "content": "\u003e consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "8": {
    "content": "    *   [Headers](#header)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 26
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "80": {
    "content": "\u003e Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "81": {
    "content": "\u003e ",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "82": {
    "content": "\u003e Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "83": {
    "content": "\u003e id sem consectetuer libero luctus adipiscing.",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "paragraph_end"
  },
  "84": {
    "content": "idx:84",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "85": {
    "content": "Markdown allows you to be lazy and only put the `\u003e` before the first",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 48,
            "secondIdx": 51
          }
        ]
      }
    ],
    "type": "paragraph_start"
  },
  "86": {
    "content": "line of a hard-wrapped paragraph:",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "87": {
    "content": "idx:87",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "88": {
    "content": "\u003e This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "89": {
    "content": "consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "9": {
    "content": "    *   [Blockquotes](#blockquote)",
    "results": [
      {
        "matcher": "link",
        "occurences": [
          {
            "firstIdx": 8,
            "secondIdx": 34
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "90": {
    "content": "Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "91": {
    "content": "idx:91",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "92": {
    "content": "\u003e Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "93": {
    "content": "id sem consectetuer libero luctus adipiscing.",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "94": {
    "content": "idx:94",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_internal"
  },
  "95": {
    "content": "Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by",
    "results": [
      {
        "matcher": "paragraph",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "96": {
    "content": "adding additional levels of `\u003e`:",
    "results": [
      {
        "matcher": "inlinecode",
        "occurences": [
          {
            "firstIdx": 28,
            "secondIdx": 31
          }
        ]
      }
    ],
    "type": "paragraph_internal"
  },
  "97": {
    "content": "idx:97",
    "results": [
      {
        "matcher": "newline",
        "occurences": null
      }
    ],
    "type": "paragraph_start"
  },
  "98": {
    "content": "\u003e This is the first level of quoting.",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  },
  "99": {
    "content": "\u003e",
    "results": [
      {
        "matcher": "blockquote",
        "occurences": [
          {
            "firstIdx": 0,
            "secondIdx": 1
          }
        ]
      }
    ],
    "type": "block_start_end"
  }
}